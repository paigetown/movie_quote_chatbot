# Paige Townsend
# ICS 31
#  Project 1
# 11/12/23
from project1_quotes import *
import random

# ------------------------------------------------------------
# Movie Quote Analysis

simple_quotes = get_practice_quotes()

def is_question(question):
    '''
    Checks to see if the inputed question ends with a question mark.

    Parameters:
    question (string) : user inputed

    Returns:
    boolean
        True if question does end with a ?
        False if question does not end with a ?
    '''
    if question.endswith('?'):
        return True
    else:
        return False
    
def get_first_quotes(quotes_list):
    '''
    Returns the first element within each list inside the nested list.

    Parameters:
    quotes_list (nested list) : from get_practice_quotes() or get_quotes()

    Returns:
    list
        firsts : list of element[0]'s in the list inside the list
    '''
    firsts = []
    for item in quotes_list:
        firsts.append(item[0])
    return firsts

def get_first_questions(quotes_list):
    '''
    Uses get_first_quotes() and is_question() to make a list of questions
    from the list of first quotes.

    Parameters:
    quotes_list (nested list) : from get_practice_quotes() or get_quotes()

    Returns:
    list
    quotes : list of question quotes in the list returned by get_first_quotes()
    '''
    quotes = []
    for item in get_first_quotes(quotes_list):
        if is_question(item):
            quotes.append(item)
    return quotes
    
def count_question_quotes(quotes_list):
    '''
    Counts how many questions have been added to the get_first_questions() list.

    Parameters:
    quotes_list (nested list) : from get_practice_quotes() or get_quotes()

    Returns:
    int
        count : number/length of the list made from get_first_questions()
    '''
    count = len(get_first_questions(quotes_list))
    return count

def get_average_question_length(quotes_list):
    '''
    Finds the average length of the questions in the list made by get_first_questions().

    Parameters:
    quotes_list (nested list) : from get_practice_quotes() or get_quotes()

    Returns:
    float
        average length using count_num_questions() for the total num (denominator)
        and adds length of each word to sum (numerator)
    '''
    sum = 0
    num = count_question_quotes(quotes_list)
    for item in get_first_questions(quotes_list):
        sum += len(item)
    return sum / num

def tests():
    '''
    Basic tester print out to check if the function works as intended.
    '''
    print(is_question('do you want some pie?'))
    print(is_question('of, course!'))
    print(get_first_quotes(simple_quotes))
    print(get_first_questions(simple_quotes))
    print(count_question_quotes(simple_quotes))
    print(get_average_question_length(simple_quotes))


# ------------------------------------------------------------
# Chatbot Section

def get_responses(quotes_list, question):
    '''
    Creates a list of possible responses to questions that matches the question parameter.

    Parameters:
    quotes_list (nested list) : from get_practice_quotes() or get_quotes()
    question (string) : phrase which is compared with the quotes_list phrases

    Returns:
    list
        responses : a list of all the responses that are paired with the inputed question
    '''
    responses = []
    for item in quotes_list:
        if item[0] == question:
            responses.append(item[1])
    return responses

def get_random_from_list(a_list):
    '''
    Uses the list made from get_responses() and picks a random response from it.

    Parameters:
    a_list (list) : a list made from get_responses()

    Returns:
    string
        a randomly selected element from a_list
    '''
    index = random.randint(0, len(a_list) - 1)
    return a_list[index]

def respond(quotes_list, question):
    '''
    Uses the get_responses() and get_random_from_list functions to send a response
    to the user's question to the chatbot() function.

    Parameters:
    quotes_list (nested list) : from get_practice_quotes() or get_quotes()
    question (string) : phrase which is compared with the quotes_list phrases
    
    Returns:
    string
        'I don't know.' there isn't a matched question in the movie_quotes file
        OR a response generated by the get_response() function
    '''
    answers = get_responses(quotes_list, question)
    if len(answers) != 0:
        return get_random_from_list(answers)
    else:
        return 'I don\'t know.'   

    

def similarity(movie_quote, user_question):
    '''
    Finds the similarity percentage of a user inputed quote and a quote in the movie_quotes file
    by comparing the number of words they have in common.

    Parameters:
    movie_quote (string) : a question provided from the movie_quotes file to be compared to user_question
    user_question (string) :

    Returns:
    float
        The percentage (as a decimal: 90% = 0.9) of how many words the quote from
        the movie_quotes file and the user quote have in common.
    '''
    sim_score = 0
    movie = set(movie_quote.split())
    user = set(user_question.split())
    if len(movie) < len(user):
        num_question_words = len(user)
    else:
        num_question_words = len(movie)
    num_matched_words = len(movie.intersection(user))
    return num_matched_words / num_question_words

def similar_responses(quotes_list, question):
    '''
    Uses the similiarty() function to check if a specific question is at least 60% (0.6) similar 
    to send the movie back through the respond function.

    Parameters:
    quotes_list (nested list) : from get_practice_quotes() or get_quotes()
    question (string) : phrase which is compared with the quotes_list phrases

    Returns:
    string
        a question from the movie_quotes file which is at least 60% similar to the user inputed question
    '''
    THRESH = 0.6
    for i in range(len(quotes_list)):
        if similarity(quotes_list[i][0], question) >= THRESH:
            return quotes_list[i][0]
            break

def most_similar(quotes_list, question):
    '''
    Finds the MOST similar question to the inputed one and runs it through the remaining functions

    Parameters:
        quotes_list (nested list) : from get_practice_quotes() or get_quotes()
    question (string) : phrase which is compared with the quotes_list phrases

    Returns:
    string
        a question from the movie_quotes file which is the most similar to the user inputed question

    '''
    curr_sim = 0.6
    curr_quote = ''
    for i in range(len(quotes_list)):
        if similarity(quotes_list[i][0], question) > curr_sim:
            curr_sim = similarity(quotes_list[i][0], question)
            curr_quote = quotes_list[i][0]
    return curr_quote

def chatbot(version):
    '''
    Main function: Takes in the user input in order to run it through the other functions; 
    respond(), get_responses(), similar_response(), and most_similar()

    Parameters:
    version (int) : determines which chatbot the program runs through;
                    1 - uses the exact question to run the function
                    2 - uses similarity check and returns responses from similar questions
                    3 - uses similarity check and returns responses with the most similar questions
    Returns:
    string
        a response found by get_responses() that corresponds with the inputed question, or a similar question
    '''
    print('Welcome\nAsk me anything. When you\'re done, just type \'bye\'')
    question = '?'
    if version == 0:
        if question.endswith('?'):
            while question != 'bye':
                question = input()
                question.lower()
                print(respond(get_quotes(), question))
        else:
            print('I only respond to questions!')
    if version == 1:
        if question.endswith('?'):
            while question != 'bye':
                question = input()
                question.lower()
                if len(get_responses(get_quotes(), question)) == 0:
                    print(respond(get_quotes(), similar_responses(get_quotes(), question)))
                else:
                    print(respond(get_quotes(), question))
        else:
                print('I only respond to questions!')
    if version == 2:
        if question.endswith('?'):
            while question != 'bye':
                question = input()
                question.lower()
                if len(get_responses(get_quotes(), question)) == 0:
                    print(respond(get_quotes(), most_similar(get_quotes(), question)))
                else:
                    print(respond(get_quotes(), question))
        else:
                print('I only respond to questions!')


def test2():
    '''
    Basic tester print out to check if the function works as intended.
    '''
    print(get_responses(simple_quotes, 'what?'))
    print(get_responses(simple_quotes, 'what is your name?'))
    print(get_random_from_list([1, 2, 3, 4, 5]))
    print(get_random_from_list([1, 2, 3, 4, 5]))
    print(get_random_from_list(["apples", "bananas", "cranberries"]))
    print(get_random_from_list(["apples", "bananas", "cranberries"]))
    respond(simple_quotes, "what?")
    respond(simple_quotes, "what?")
    respond(simple_quotes, "what?")
    respond(simple_quotes, "what is your name?")
    respond(simple_quotes, "what is your name")
    respond(simple_quotes, "banana")

chatbot(0)
# chatbot(1)
# chatbot(2)